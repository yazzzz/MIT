lec 3 ----

for what values will this program terminate?
how do i know that? the decrementing function. that's what guarantees your loop will terminate


decrement function needs to have
- map a set of program variables to an integer
- starts with a non-negative value
- when value <= 0, loop terminates
- is decreased each time thru the loop

abs(x) - ans**3 is the decrement function ****** WTF
exhaustive enumeration. exhaust the space of possible answers. brute force.
find the square root of a number. what does that mean?
approximation (good enough)

find a y such that y * y = x + or - some epsilon (that is a specification)

how long this will run depends on increment value and how big epsilon is and how
far we are from the value (which value?)

need a better algorithm

bisection search.
- cut the search space in half each iteration

pick a spot in the middle. check it that value is too big or too small. prune the search space. log base 2.
when we exit the loop determines the size of the search space? epsilon.
bisection search depends on the answer being in our search region.

lec 4 ---- 

if values aren't changing as you iterate thru the loop, that means it will loop forever.

functions: mechanism for:
- decomposition: creates structure via modules. self contained and reusable
- abstraction: supresses details

function has: name, parameters, body (code of the function)
if no return in your function, it will return None

def f(x):
  x = x + 1
  print 'x =', x
  return x

x = 3
z = f(x)
print 'z =', z
print 'x =', x

you get:
x = 4
z = 4
x = 3



the formal parameter x is BOUND to teh value of the actual parameter, x
upon entry a new scope is created. a new scope is a mapping of names to objects

assert True does nothing
assert False stops program

outermost scope, find the name of my functions. f1 maps to an object that is a function

main scope
function scope

each scope is a stack frame (last in first out)

strings: non scalar (values that can be decomposed)

slicing makes a copy

------ recitation 2

decrementing function: statement that moves the loop closer to termination

tuples non scalar data type (non scalar means it can hold more than one thing at a time)

immutable


review

Decomposition breaks a problem into self-contained, manageable parts.
Abstraction allows us to ignore the details of a piece of code, and use it as a black box â€“ input x, get y.
Formal parameters are the names of variables used inside a procedure; actual parameters (or arguments) are the values assigned to those names.

assert stops the program
break exits the current loop



